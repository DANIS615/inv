import 'package:inven_fact/services/seller_service.dart';
import 'package:inven_fact/services/auth_service.dart';
import 'package:inven_fact/models/seller.dart';
import 'package:inven_fact/utils/database_helper.dart';

class DebugDatabaseConnection {
  static final SellerService _sellerService = SellerService();
  static final AuthService _authService = AuthService();

  /// Diagn√≥stico completo de la conexi√≥n a la base de datos
  static Future<void> runFullDiagnostic() async {
    print('üîç INICIANDO DIAGN√ìSTICO COMPLETO DE BASE DE DATOS');
    print('=' * 60);
    
    try {
      // 1. Verificar si la base de datos es accesible
      print('\nüìä 1. VERIFICANDO ACCESIBILIDAD DE BASE DE DATOS...');
      final isAccessible = await DatabaseHelper.isDatabaseAccessible();
      print('‚úÖ Base de datos accesible: $isAccessible');
      
      if (!isAccessible) {
        print('‚ùå PROBLEMA: La base de datos no es accesible');
        return;
      }

      // 2. Obtener la ruta de la base de datos
      print('\nüìÅ 2. RUTA DE BASE DE DATOS...');
      final dbPath = await DatabaseHelper.getDatabasePath();
      print('üìç Ruta: $dbPath');

      // 3. Verificar todos los vendedores en la base de datos
      print('\nüë• 3. VERIFICANDO VENDEDORES EN BASE DE DATOS...');
      final allSellers = await _sellerService.getAllSellers();
      print('üìä Total de vendedores encontrados: ${allSellers.length}');
      
      for (var seller in allSellers) {
        print('\nüîç Vendedor:');
        print('   ID: ${seller.id}');
        print('   Nombre: ${seller.name}');
        print('   Contrase√±a: ${seller.password}');
        print('   Primer Login: ${seller.isFirstLogin}');
        print('   Activo: ${seller.isActive}');
        print('   √öltimo Login: ${seller.lastLogin}');
        print('   Creado: ${seller.createdAt}');
      }

      // 4. Probar autenticaci√≥n con credenciales por defecto
      print('\nüîê 4. PROBANDO AUTENTICACI√ìN...');
      final testId = 'VENDEDOR001';
      final testPassword = '123456';
      
      print('üß™ Probando con ID: $testId, Password: $testPassword');
      
      final authResult = await _sellerService.authenticateSeller(testId, testPassword);
      if (authResult != null) {
        print('‚úÖ AUTENTICACI√ìN EXITOSA');
        print('   Vendedor autenticado: ${authResult.name}');
        print('   Es primer login: ${authResult.isFirstLogin}');
      } else {
        print('‚ùå AUTENTICACI√ìN FALL√ì');
        
        // Probar sin filtro de activo
        print('\nüîç Probando sin filtro de activo...');
        final unfilteredResult = await _sellerService.getSellerByIdUnfiltered(testId);
        if (unfilteredResult != null) {
          print('‚ö†Ô∏è Vendedor encontrado sin filtro:');
          print('   ID: ${unfilteredResult.id}');
          print('   Activo: ${unfilteredResult.isActive}');
          print('   Contrase√±a: ${unfilteredResult.password}');
        } else {
          print('‚ùå Vendedor no encontrado en absoluto');
        }
      }

      // 5. Probar el servicio de autenticaci√≥n completo
      print('\nüîë 5. PROBANDO SERVICIO DE AUTENTICACI√ìN COMPLETO...');
      final loginResult = await _authService.loginSeller(testId, testPassword);
      print('üîê Resultado del login: $loginResult');
      
      if (loginResult) {
        print('‚úÖ LOGIN EXITOSO');
        print('   Vendedor logueado: ${_authService.sellerName}');
        print('   ID: ${_authService.sellerId}');
        print('   Es primer login: ${_authService.isFirstLogin}');
      } else {
        print('‚ùå LOGIN FALL√ì');
      }

      // 6. Verificar estado de autenticaci√≥n
      print('\nüìã 6. ESTADO ACTUAL DE AUTENTICACI√ìN...');
      print('   Est√° logueado: ${_authService.isSellerLoggedIn}');
      print('   Es autenticado: ${_authService.isAuthenticated()}');
      print('   Nombre: ${_authService.sellerName}');
      print('   ID: ${_authService.sellerId}');

    } catch (e, stackTrace) {
      print('\n‚ùå ERROR DURANTE EL DIAGN√ìSTICO:');
      print('   Error: $e');
      print('   Stack trace: $stackTrace');
    }
    
    print('\n' + '=' * 60);
    print('üèÅ DIAGN√ìSTICO COMPLETADO');
  }

  /// Diagn√≥stico r√°pido para verificar solo la conexi√≥n
  static Future<bool> quickConnectionTest() async {
    try {
      print('üîç Prueba r√°pida de conexi√≥n...');
      
      // Verificar accesibilidad
      final isAccessible = await DatabaseHelper.isDatabaseAccessible();
      if (!isAccessible) {
        print('‚ùå Base de datos no accesible');
        return false;
      }
      
      // Intentar obtener vendedores
      final sellers = await _sellerService.getAllSellers();
      print('‚úÖ Conexi√≥n exitosa. Vendedores encontrados: ${sellers.length}');
      
      return true;
    } catch (e) {
      print('‚ùå Error en prueba r√°pida: $e');
      return false;
    }
  }

  /// Reinicializar la base de datos si es necesario
  static Future<void> resetDatabaseIfNeeded() async {
    try {
      print('üîÑ Verificando si es necesario reinicializar la base de datos...');
      
      final isAccessible = await DatabaseHelper.isDatabaseAccessible();
      if (!isAccessible) {
        print('üîÑ Base de datos no accesible, reinicializando...');
        await DatabaseHelper.clearDatabase();
        await DatabaseHelper.initializeDatabase();
        print('‚úÖ Base de datos reinicializada');
      } else {
        print('‚úÖ Base de datos accesible, no se necesita reinicializaci√≥n');
      }
    } catch (e) {
      print('‚ùå Error al reinicializar base de datos: $e');
    }
  }
}
